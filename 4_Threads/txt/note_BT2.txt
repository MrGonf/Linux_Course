#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <pthread.h>

pthread_mutex_t lock1 = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t lock2 = PTHREAD_MUTEX_INITIALIZER;

int counter = 2; // Shared variable

static void *thr_handler1(void *args) {
    pthread_mutex_lock(&lock1);

    // Critical section
    printf("Thread 1 handler, counter: %d\n", counter++);
    sleep(1);
    pthread_mutex_unlock(&lock1);

    pthread_exit(NULL);
}

static void *thr_handler2(void *args) {
    pthread_mutex_lock(&lock1);
    printf("Thread 2 handler, counter: %d\n", counter++);
    pthread_mutex_unlock(&lock1);

    pthread_exit(NULL);
}

int main(int argc, char const *argv[]) {
    int ret;
    pthread_t tid1, tid2;

    if ((ret = pthread_create(&tid1, NULL, &thr_handler1, NULL)) != 0) {
        printf("pthread_create() error number = %d\n", ret);
        return -1;
    }

    if ((ret = pthread_create(&tid2, NULL, &thr_handler2, NULL)) != 0) {
        printf("pthread_create() error number = %d\n", ret);
        return -1;
    }

    pthread_join(tid1, NULL);
    pthread_join(tid2, NULL);

    return 0;
}
